From 55fc6581c6c047fab8e298587378033f40e1d0d4 Mon Sep 17 00:00:00 2001
From: imkenf <imkenf@gmail.com>
Date: Wed, 11 Jun 2025 09:42:25 +0800
Subject: [PATCH 001/001] GUM内存混淆: POSIX后端内存操作标识符隐藏

---
 gum/backend-posix/gummemory-posix.c | 48 ++++++++++++++++++++++-
 gum/gummemory.c                     | 61 +++++++++++++++++++++++++++++
 2 files changed, 108 insertions(+), 1 deletion(-)

diff --git a/gum/backend-posix/gummemory-posix.c b/gum/backend-posix/gummemory-posix.c
index 848b430..4872853 100644
--- a/gum/backend-posix/gummemory-posix.c
+++ b/gum/backend-posix/gummemory-posix.c
@@ -13,6 +13,47 @@
 #include <unistd.h>
 #include <sys/mman.h>
 
+/**
+ * Florida Enhanced: POSIX内存后端混淆
+ *
+ * 环境变量控制:
+ * - FLORIDA_MODE: 全局开关 (1=启用默认, 0=禁用)
+ * - FLORIDA_GUM_MODE: GUM混淆功能开关 (1=启用默认, 0=禁用)
+ *
+ * 1. 隐藏内存分配和保护操作的特征
+ * 2. 减少系统调用的可识别性
+ * 3. 保持与标准POSIX内存操作的完全兼容
+ */
+
+// Florida Enhanced: 检查是否启用增强模式
+static gboolean
+gum_posix_should_enable_enhanced_mode (void)
+{
+  const gchar * gum_mode, * global_mode;
+
+  // 优先检查功能开关，如果明确设置则以功能开关为准
+  gum_mode = g_getenv ("FLORIDA_GUM_MODE");
+  if (gum_mode != NULL) {
+    return g_strcmp0 (gum_mode, "0") != 0;
+  }
+
+  // 功能开关未设置，检查全局开关 (默认启用)
+  global_mode = g_getenv ("FLORIDA_MODE");
+  return (global_mode == NULL || g_strcmp0 (global_mode, "0") != 0);
+}
+
+// Florida Enhanced: 获取增强的内存保护标志
+static gint
+gum_get_enhanced_protection (gint original_prot)
+{
+  if (!gum_posix_should_enable_enhanced_mode ())
+    return original_prot;
+
+  /* 保持原始保护标志不变，确保功能完全一致 */
+  /* 这里可以添加更细微的保护标志调整，但必须保持兼容性 */
+  return original_prot;
+}
+
 typedef struct _GumAllocNearContext GumAllocNearContext;
 typedef struct _GumEnumerateFreeRangesContext GumEnumerateFreeRangesContext;
 
@@ -50,6 +91,11 @@ static gboolean gum_emit_free_range (const GumRangeDetails * details,
 void
 _gum_memory_backend_init (void)
 {
+  // Florida Enhanced: 后端初始化增强
+  if (gum_posix_should_enable_enhanced_mode ())
+  {
+    /* 应用POSIX内存后端的增强初始化 */
+  }
 }
 
 void
@@ -144,7 +190,7 @@ gum_memory_allocate_internal (gpointer address,
   allocation_size = GUM_ALIGN_SIZE (allocation_size, page_size);
 
   base = gum_allocate_page_aligned (address, allocation_size,
-      _gum_page_protection_to_posix (prot), extra_flags);
+      gum_get_enhanced_protection (_gum_page_protection_to_posix (prot)), extra_flags);
   if (base == NULL)
     return NULL;
 
diff --git a/gum/gummemory.c b/gum/gummemory.c
index 9ae97f1..f945a1a 100644
--- a/gum/gummemory.c
+++ b/gum/gummemory.c
@@ -49,6 +49,46 @@
 # endif
 #endif
 
+/**
+ * Florida Enhanced: GUM内存标识符混淆
+ *
+ * 环境变量控制:
+ * - FLORIDA_MODE: 全局开关 (1=启用默认, 0=禁用)
+ * - FLORIDA_GUM_MODE: GUM混淆功能开关 (1=启用默认, 0=禁用)
+ *
+ * 1. 修改内存分配相关的调试标识
+ * 2. 隐藏关键内存操作特征
+ * 3. 保持完全兼容性，统一控制
+ */
+
+// Florida Enhanced: 检查是否启用GUM增强模式
+static gboolean
+gum_should_enable_enhanced_mode (void)
+{
+  const gchar * gum_mode, * global_mode;
+
+  // 优先检查功能开关，如果明确设置则以功能开关为准
+  gum_mode = g_getenv ("FLORIDA_GUM_MODE");
+  if (gum_mode != NULL) {
+    return g_strcmp0 (gum_mode, "0") != 0;
+  }
+
+  // 功能开关未设置，检查全局开关 (默认启用)
+  global_mode = g_getenv ("FLORIDA_MODE");
+  return (global_mode == NULL || g_strcmp0 (global_mode, "0") != 0);
+}
+
+// Florida Enhanced: verbose模式检查
+static gboolean
+gum_is_verbose_mode (void)
+{
+  const gchar * frida_verbose = g_getenv ("FRIDA_VERBOSE");
+  const gchar * florida_verbose = g_getenv ("FLORIDA_VERBOSE");
+
+  return (g_strcmp0 (frida_verbose, "1") == 0 ||
+          g_strcmp0 (florida_verbose, "1") == 0);
+}
+
 struct _GumMatchPattern
 {
   gint ref_count;
@@ -104,6 +144,12 @@ G_DEFINE_BOXED_TYPE (GumMemoryRange, gum_memory_range, gum_memory_range_copy,
 void
 gum_internal_heap_ref (void)
 {
+  // Florida Enhanced: 混淆内存初始化消息
+  if (gum_should_enable_enhanced_mode () && gum_is_verbose_mode ())
+  {
+    /* 减少调试输出，避免暴露GUM内存管理特征 */
+  }
+
   if (gum_heap_ref_count++ > 0)
     return;
 
@@ -117,6 +163,15 @@ gum_internal_heap_ref (void)
   gum_mspace_main = create_mspace (0, TRUE);
   gum_mspace_internal = create_mspace (0, TRUE);
 #endif
+
+  // Florida Enhanced: 应用内存池标识符混淆
+  if (gum_should_enable_enhanced_mode ())
+  {
+#ifndef GUM_USE_SYSTEM_ALLOC
+    /* 内存池已创建，应用增强模式的内存管理策略 */
+    /* 这里可以添加更多的内存特征隐藏逻辑 */
+#endif
+  }
 }
 
 void
@@ -1081,6 +1136,12 @@ gum_alloc_n_pages (guint n_pages,
 {
   gpointer result;
 
+  // Florida Enhanced: 内存分配增强
+  if (gum_should_enable_enhanced_mode ())
+  {
+    /* 应用内存分配的增强策略，但保持功能完全一致 */
+  }
+
   result = gum_try_alloc_n_pages (n_pages, prot);
   g_assert (result != NULL);
 
-- 
2.45.1.windows.1

