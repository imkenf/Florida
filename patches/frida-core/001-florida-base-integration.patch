From 5c2cd3ea02f0b094cf8e040a2f5a80aded339d89 Mon Sep 17 00:00:00 2001
From: imkenf <imkenf@gmail.com>
Date: Thu, 12 Jun 2025 00:01:30 +0800
Subject: [PATCH 001/004] Florida Enhanced: 基础集成统一命令行参数和环境变量控制

---
 server/server.vala | 96 +++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 95 insertions(+), 1 deletion(-)

diff --git a/server/server.vala b/server/server.vala
index 67bf4b3..3fdd6db 100644
--- a/server/server.vala
+++ b/server/server.vala
@@ -17,6 +17,16 @@ namespace Frida.Server {
 	private static bool enable_preload = true;
 	private static bool report_crashes = true;
 	private static bool verbose = false;
+	// Florida Enhanced: 统一的增强功能命令行参数支持
+	private static string? florida_mode_str = null;
+	private static string? florida_rpc_mode_str = null;
+	private static string? florida_file_mode_str = null;
+	private static string? florida_symbol_mode_str = null;
+	private static string? florida_thread_mode_str = null;
+	private static string? florida_memory_mode_str = null;
+	private static string? florida_protocol_mode_str = null;
+	private static string? florida_builtin_mode_str = null;
+	private static bool no_florida = false;
 
 	private enum PolicySoftenerFlavor {
 		SYSTEM,
@@ -48,6 +58,15 @@ namespace Frida.Server {
 		{ "ignore-crashes", 'C', OptionFlags.REVERSE, OptionArg.NONE, ref report_crashes,
 			"Disable native crash reporter integration", null },
 		{ "verbose", 'v', 0, OptionArg.NONE, ref verbose, "Be verbose", null },
+		{ "florida-mode", 0, 0, OptionArg.STRING, ref florida_mode_str, "Enable/disable all Florida enhanced features (1/0)", "ENABLE" },
+		{ "florida-rpc-mode", 0, 0, OptionArg.STRING, ref florida_rpc_mode_str, "Enable/disable RPC protocol obfuscation (1/0)", "ENABLE" },
+		{ "florida-file-mode", 0, 0, OptionArg.STRING, ref florida_file_mode_str, "Enable/disable filename obfuscation (1/0)", "ENABLE" },
+		{ "florida-symbol-mode", 0, 0, OptionArg.STRING, ref florida_symbol_mode_str, "Enable/disable symbol name obfuscation (1/0)", "ENABLE" },
+		{ "florida-thread-mode", 0, 0, OptionArg.STRING, ref florida_thread_mode_str, "Enable/disable thread name obfuscation (1/0)", "ENABLE" },
+		{ "florida-memory-mode", 0, 0, OptionArg.STRING, ref florida_memory_mode_str, "Enable/disable memory identifier obfuscation (1/0)", "ENABLE" },
+		{ "florida-protocol-mode", 0, 0, OptionArg.STRING, ref florida_protocol_mode_str, "Enable/disable protocol handler enhancement (1/0)", "ENABLE" },
+		{ "florida-builtin-mode", 0, 0, OptionArg.STRING, ref florida_builtin_mode_str, "Enable/disable builtin anti-detection integration (1/0)", "ENABLE" },
+		{ "no-florida", 0, 0, OptionArg.NONE, ref no_florida, "Disable all Florida enhanced features", null },
 		{ null }
 	};
 
@@ -78,6 +97,51 @@ namespace Frida.Server {
 
 		Environment.set_verbose_logging_enabled (verbose);
 
+		// Florida Enhanced: 处理所有增强功能命令行参数并设置对应的环境变量
+		if (no_florida) {
+			// --no-florida 快速禁用所有功能
+			Environment.set_variable ("FLORIDA_MODE", "0", true);
+		} else {
+			// 处理具体的开关参数
+			if (florida_mode_str != null) {
+				Environment.set_variable ("FLORIDA_MODE", florida_mode_str, true);
+			}
+			if (florida_rpc_mode_str != null) {
+				Environment.set_variable ("FLORIDA_RPC_MODE", florida_rpc_mode_str, true);
+			}
+			if (florida_file_mode_str != null) {
+				Environment.set_variable ("FLORIDA_FILE_MODE", florida_file_mode_str, true);
+			}
+			if (florida_symbol_mode_str != null) {
+				Environment.set_variable ("FLORIDA_SYMBOL_MODE", florida_symbol_mode_str, true);
+			}
+			if (florida_thread_mode_str != null) {
+				Environment.set_variable ("FLORIDA_THREAD_MODE", florida_thread_mode_str, true);
+			}
+			if (florida_memory_mode_str != null) {
+				Environment.set_variable ("FLORIDA_MEMORY_MODE", florida_memory_mode_str, true);
+			}
+			if (florida_protocol_mode_str != null) {
+				Environment.set_variable ("FLORIDA_PROTOCOL_MODE", florida_protocol_mode_str, true);
+			}
+			if (florida_builtin_mode_str != null) {
+				Environment.set_variable ("FLORIDA_BUILTIN_MODE", florida_builtin_mode_str, true);
+			}
+		}
+
+		// 调试信息输出 (仅在详细模式下)
+		if (verbose) {
+			stdout.printf ("Florida Enhanced Configuration:\n");
+			stdout.printf ("  Global mode: %s\n", Environment.get_variable ("FLORIDA_MODE") ?? "default(1)");
+			stdout.printf ("  RPC mode: %s\n", Environment.get_variable ("FLORIDA_RPC_MODE") ?? "default(1)");
+			stdout.printf ("  File mode: %s\n", Environment.get_variable ("FLORIDA_FILE_MODE") ?? "default(1)");
+			stdout.printf ("  Symbol mode: %s\n", Environment.get_variable ("FLORIDA_SYMBOL_MODE") ?? "default(1)");
+			stdout.printf ("  Thread mode: %s\n", Environment.get_variable ("FLORIDA_THREAD_MODE") ?? "default(1)");
+			stdout.printf ("  Memory mode: %s\n", Environment.get_variable ("FLORIDA_MEMORY_MODE") ?? "default(1)");
+			stdout.printf ("  Protocol mode: %s\n", Environment.get_variable ("FLORIDA_PROTOCOL_MODE") ?? "default(1)");
+			stdout.printf ("  Builtin mode: %s\n", Environment.get_variable ("FLORIDA_BUILTIN_MODE") ?? "default(1)");
+		}
+
 		EndpointParameters endpoint_params;
 		try {
 			endpoint_params = new EndpointParameters (listen_address, 0, parse_certificate (certpath), origin,
@@ -178,8 +242,38 @@ namespace Frida.Server {
 
 		Environment.configure ();
 
+		// Florida Enhanced: 自包含的线程名混淆功能 (避免跨模块依赖)
+		string thread_name = "frida-server-main-loop";
+		
+		// 检查是否启用线程名混淆
+		string? thread_mode = Environment.get_variable("FLORIDA_THREAD_MODE");
+		bool thread_enhanced_enabled;
+		if (thread_mode != null) {
+			thread_enhanced_enabled = (thread_mode != "0");
+		} else {
+			// 功能开关未设置，检查全局开关 (默认启用)
+			string? global_mode = Environment.get_variable("FLORIDA_MODE");
+			thread_enhanced_enabled = (global_mode != "0");
+		}
+		
+		if (thread_enhanced_enabled) {
+			// 生成混淆后的线程名
+			string[] thread_prefixes = {"thread", "worker", "task", "job", "service", "handler", "process"};
+			string[] thread_components = {"main", "bg", "io", "net", "ui", "core", "util", "sys"};
+			string[] thread_suffixes = {"", "-1", "-2", "-pool", "-mgr", "-svc"};
+			
+			uint32 seed = (uint32)(get_real_time() % 1000000) ^ thread_name.hash();
+			Random.set_seed(seed);
+			
+			string prefix = thread_prefixes[Random.int_range(0, thread_prefixes.length)];
+			string component = thread_components[Random.int_range(0, thread_components.length)];
+			string suffix = thread_suffixes[Random.int_range(0, thread_suffixes.length)];
+			
+			thread_name = prefix + "-" + component + suffix;
+		}
+
 #if DARWIN
-		var worker = new Thread<int> ("frida-server-main-loop", () => {
+		var worker = new Thread<int> (thread_name, () => {
 			var exit_code = run_application (device_id, endpoint_params, options, on_ready);
 
 			_stop_run_loop ();
-- 
2.45.1.windows.1

