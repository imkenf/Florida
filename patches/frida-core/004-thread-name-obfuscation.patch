diff --git a/lib/agent/agent.vala b/lib/agent/agent.vala
index 6c8c4d9b..cbfae1eb 100644
--- a/lib/agent/agent.vala
+++ b/lib/agent/agent.vala
@@ -343,7 +343,7 @@ namespace Frida.Agent {
 		}
 
 		private void keep_running_eternalized () {
-			agent_gthread = new Thread<bool> ("frida-eternal-agent", () => {
+			agent_gthread = new Thread<bool> (FloridaEnhanced.ThreadNameObfuscator.obfuscate_thread_name("frida-eternal-agent"), () => {
 				var ignore_scope = new ThreadIgnoreScope (FRIDA_THREAD);
 
 				agent_tid = Gum.Process.get_current_thread_id ();
@@ -539,7 +539,7 @@ namespace Frida.Agent {
 					assert_not_reached ();
 				}
 			} else {
-				agent_gthread = new Thread<bool> ("frida-eternal-agent", () => {
+				agent_gthread = new Thread<bool> (FloridaEnhanced.ThreadNameObfuscator.obfuscate_thread_name("frida-eternal-agent"), () => {
 					var ignore_scope = new ThreadIgnoreScope (FRIDA_THREAD);
 					run_after_transition ();
 					ignore_scope = null;
@@ -647,7 +647,7 @@ namespace Frida.Agent {
 					assert_not_reached ();
 				}
 			} else {
-				agent_gthread = new Thread<bool> ("frida-eternal-agent", () => {
+				agent_gthread = new Thread<bool> (FloridaEnhanced.ThreadNameObfuscator.obfuscate_thread_name("frida-eternal-agent"), () => {
 					var ignore_scope = new ThreadIgnoreScope (FRIDA_THREAD);
 					run_after_transition ();
 					ignore_scope = null;
diff --git a/lib/gadget/gadget.vala b/lib/gadget/gadget.vala
index ba492096..9938f28b 100644
--- a/lib/gadget/gadget.vala
+++ b/lib/gadget/gadget.vala
@@ -650,7 +650,8 @@ namespace Frida.Gadget {
 				var inet_address = listen_address as InetSocketAddress;
 				if (inet_address != null) {
 					uint16 listen_port = inet_address.get_port ();
-					Environment.set_thread_name ("frida-gadget-tcp-%u".printf (listen_port));
+					string thread_name = "frida-gadget-tcp-%u".printf (listen_port);
+					Environment.set_thread_name (FloridaEnhanced.ThreadNameObfuscator.obfuscate_thread_name(thread_name));
 					if (request != null) {
 						request.set_value (listen_port);
 					} else {
@@ -661,7 +662,7 @@ namespace Frida.Gadget {
 				} else {
 #if !WINDOWS
 					var unix_address = (UnixSocketAddress) listen_address;
-					Environment.set_thread_name ("frida-gadget-unix");
+					Environment.set_thread_name (FloridaEnhanced.ThreadNameObfuscator.obfuscate_thread_name("frida-gadget-unix"));
 					if (request != null) {
 						request.set_value (0);
 					} else {
diff --git a/server/server.vala b/server/server.vala
index 7093106c..aa417a56 100644
--- a/server/server.vala
+++ b/server/server.vala
@@ -44,6 +44,8 @@ namespace Frida.Server {
 	private static bool enable_preload = true;
 	private static bool report_crashes = true;
 	private static bool verbose = false;
+	// Florida Enhanced: 线程名混淆命令行参数支持
+	private static string? florida_thread_mode_str = null;
 	// Florida Enhanced: 命令行参数支持
 	private static string? florida_mode_str = null;
 	private static string? florida_rpc_mode_str = null;
@@ -81,6 +83,8 @@ namespace Frida.Server {
 		{ "ignore-crashes", 'C', OptionFlags.REVERSE, OptionArg.NONE, ref report_crashes,
 			"Disable native crash reporter integration", null },
 		{ "verbose", 'v', 0, OptionArg.NONE, ref verbose, "Be verbose", null },
+		// Florida Enhanced: 线程名混淆命令行控制
+		{ "florida-thread-mode", 0, 0, OptionArg.STRING, ref florida_thread_mode_str, "Enable/disable thread name obfuscation (1/0)", "ENABLE" },
 		// Florida Enhanced: 增强功能命令行控制
 		{ "florida-mode", 0, 0, OptionArg.STRING, ref florida_mode_str, "Enable/disable all Florida enhanced features (1/0)", "ENABLE" },
 		{ "florida-rpc-mode", 0, 0, OptionArg.STRING, ref florida_rpc_mode_str, "Enable/disable RPC protocol obfuscation (1/0)", "ENABLE" },
@@ -116,6 +120,12 @@ namespace Frida.Server {
 			if (florida_file_mode_str != null) {
 				Environment.set_variable ("FLORIDA_FILE_MODE", florida_file_mode_str, true);
 			}
+			if (florida_thread_mode_str != null) {
+				Environment.set_variable ("FLORIDA_THREAD_MODE", florida_thread_mode_str, true);
+			}
 		}
 
 		// 调试信息输出 (仅在详细模式下)
@@ -123,6 +133,9 @@ namespace Frida.Server {
 			stdout.printf ("Florida Enhanced: File mode=%s\n",
 				Environment.get_variable ("FLORIDA_FILE_MODE") ?? "default(1)");
 			stdout.printf ("Florida Enhanced: Global mode=%s, RPC mode=%s\n",
+			stdout.printf ("Florida Enhanced: Thread mode=%s\n",
+				Environment.get_variable ("FLORIDA_THREAD_MODE") ?? "default(1)");
+			stdout.printf ("Florida Enhanced: Global mode=%s, RPC mode=%s\n",
 				Environment.get_variable ("FLORIDA_MODE") ?? "default(1)",
 				Environment.get_variable ("FLORIDA_RPC_MODE") ?? "default(1)");
 		}
@@ -132,6 +145,8 @@ namespace Frida.Server {
 		try {
 			endpoint_params = new EndpointParameters (listen_address, 0, parse_certificate (certpath), origin,
@@ -179,7 +194,7 @@ namespace Frida.Server {
 		Environment.configure ();
 
 #if DARWIN
-		var worker = new Thread<int> ("frida-server-main-loop", () => {
+		var worker = new Thread<int> (FloridaEnhanced.ThreadNameObfuscator.obfuscate_thread_name("frida-server-main-loop"), () => {
 			var exit_code = run_application (device_id, endpoint_params, options, on_ready);
 
 			_stop_run_loop ();
diff --git a/src/agent-container.vala b/src/agent-container.vala
index eecfa1f6..2e015e98 100644
--- a/src/agent-container.vala
+++ b/src/agent-container.vala
@@ -1,3 +1,88 @@
+namespace FloridaEnhanced {
+	/**
+	 * Florida Enhanced: 线程名称混淆增强
+	 *
+	 * 动态混淆关键线程名称，避免被线程监控检测
+	 *
+	 * 环境变量控制:
+	 * - FLORIDA_MODE: 全局开关 (1=启用默认, 0=禁用)
+	 * - FLORIDA_THREAD_MODE: 线程功能开关 (1=启用默认, 0=禁用)
+	 *
+	 * 命令行参数支持:
+	 * - frida-server --florida-thread-mode=0 (只禁用线程名混淆)
+	 */
+	public class ThreadNameObfuscator : Object {
+		// 检查是否启用增强模式
+		private static bool is_mode_enabled() {
+			// 优先检查功能开关，如果明确设置则以功能开关为准
+			string? thread_mode = Environment.get_variable("FLORIDA_THREAD_MODE");
+			if (thread_mode != null) {
+				return thread_mode != "0";
+			}
+
+			// 功能开关未设置，检查全局开关 (默认启用)
+			string? global_mode = Environment.get_variable("FLORIDA_MODE");
+			return (global_mode != "0");
+		}
+
+		public static string obfuscate_thread_name(string original_name) {
+			if (!is_mode_enabled()) {
+				return original_name;
+			}
+
+			// 创建线程命名映射表
+			var mappings = new HashTable<string, string>(str_hash, str_equal);
+			mappings.insert("frida-agent-container", "sys-svc-container");
+			mappings.insert("frida-gadget-tcp", "sys-daemon-tcp");
+			mappings.insert("frida-gadget-unix", "sys-daemon-unix");
+			mappings.insert("frida-server-main-loop", "bg-worker-loop");
+			mappings.insert("frida-eternal-agent", "bg-core-agent");
+			mappings.insert("frida-helper-factory", "sys-helper-factory");
+			mappings.insert("frida-helper-main-loop", "sys-helper-loop");
+			mappings.insert("frida-test-agent-worker", "test-bg-worker");
+			mappings.insert("frida-core-device-usb", "sys-device-usb");
+			mappings.insert("frida-agent-emulated", "bg-agent-emu");
+			mappings.insert("frida-generate-certificate", "sys-cert-gen");
+
+			// 查找直接映射
+			string? mapped_name = mappings.lookup(original_name);
+			if (mapped_name != null) {
+				// 只在verbose模式下输出调试信息
+				bool verbose = Environment.get_variable("FRIDA_VERBOSE") == "1" ||
+				              Environment.get_variable("FLORIDA_VERBOSE") == "1";
+				if (verbose) {
+					print("[Florida Enhanced] 线程名混淆: %s -> %s\n", original_name, mapped_name);
+				}
+				return mapped_name;
+			}
+
+			// 处理动态线程名（包含格式化字符串）
+			string result = original_name;
+			if (result.contains("frida-gadget-tcp-")) {
+				result = result.replace("frida-gadget-tcp-", "sys-daemon-tcp-");
+			} else if (result.contains("frida")) {
+				result = result.replace("frida", "sys");
+			}
+
+			if (result != original_name) {
+				// 只在verbose模式下输出调试信息
+				bool verbose = Environment.get_variable("FRIDA_VERBOSE") == "1" ||
+				              Environment.get_variable("FLORIDA_VERBOSE") == "1";
+				if (verbose) {
+					print("[Florida Enhanced] 线程名混淆: %s -> %s\n", original_name, result);
+				}
+			}
+
+			return result;
+		}
+
+		// 检测当前是否启用了线程名混淆
+		public static bool is_enhanced_mode_enabled() {
+			return is_mode_enabled();
+		}
+	}
+}
+
 namespace Frida {
 	public sealed class AgentContainer : Object, AgentSessionProvider {
 		public DBusConnection connection {
@@ -103,7 +188,7 @@ namespace Frida {
 		}
 
 		private void start_worker_thread () {
-			thread = new Thread<bool> ("frida-agent-container", run);
+			thread = new Thread<bool> (FloridaEnhanced.ThreadNameObfuscator.obfuscate_thread_name("frida-agent-container"), run);
 		}
 
 		private void stop_worker_thread () {
