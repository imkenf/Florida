From 994789b824441dd02af45caa69994b600585d566 Mon Sep 17 00:00:00 2001
From: imkenf <imkenf@gmail.com>
Date: Thu, 12 Jun 2025 00:07:48 +0800
Subject: [PATCH 003/004] Florida Enhanced: RPC协议双模式 自包含协议增强实现

---
 lib/base/rpc.vala | 113 ++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 103 insertions(+), 10 deletions(-)

diff --git a/lib/base/rpc.vala b/lib/base/rpc.vala
index c465452..06de4c9 100644
--- a/lib/base/rpc.vala
+++ b/lib/base/rpc.vala
@@ -6,6 +6,85 @@ namespace Frida {
 		}
 
 		private Gee.HashMap<string, PendingResponse> pending_responses = new Gee.HashMap<string, PendingResponse> ();
+		
+		// Florida Enhanced: 自包含的RPC协议增强器 (避免跨模块依赖)
+		private static HashTable<string, string>? _command_map = null;
+		private static HashTable<string, string>? _reverse_map = null;
+		private static bool _enhanced_mode_enabled = false;
+		private static bool _initialized = false;
+
+		// Florida Enhanced: 检查是否启用增强模式
+		private static bool is_rpc_enhanced_mode_enabled() {
+			// 优先检查功能开关，如果明确设置则以功能开关为准
+			string? rpc_mode = Environment.get_variable("FLORIDA_RPC_MODE");
+			if (rpc_mode != null) {
+				return rpc_mode != "0";
+			}
+
+			// 功能开关未设置，检查全局开关 (默认启用)
+			string? global_mode = Environment.get_variable("FLORIDA_MODE");
+			return (global_mode != "0");
+		}
+
+		// Florida Enhanced: 初始化协议映射
+		private static void init_rpc_enhancement() {
+			if (_initialized)
+				return;
+
+			_enhanced_mode_enabled = is_rpc_enhanced_mode_enabled();
+			_initialized = true;
+
+			if (!_enhanced_mode_enabled)
+				return;
+
+			_command_map = new HashTable<string, string>(str_hash, str_equal);
+			_reverse_map = new HashTable<string, string>(str_hash, str_equal);
+
+			// 基础协议标识符映射
+			_command_map.insert("frida:rpc", "invoke:op");
+			_command_map.insert("call", "exec");
+			_command_map.insert("ok", "success");
+
+			// 创建反向映射
+			var keys = _command_map.get_keys();
+			foreach (var key in keys) {
+				_reverse_map.insert(_command_map.get(key), key);
+			}
+		}
+
+		// Florida Enhanced: 获取命令映射 (标准 -> 增强)
+		private static string map_rpc_command(string cmd) {
+			init_rpc_enhancement();
+			
+			if (!_enhanced_mode_enabled || _command_map == null)
+				return cmd;
+
+			string? mapped = _command_map.lookup(cmd);
+			return (mapped != null) ? mapped : cmd;
+		}
+
+		// Florida Enhanced: 获取命令反向映射 (增强 -> 标准)
+		private static string reverse_map_rpc_command(string cmd) {
+			init_rpc_enhancement();
+
+			if (!_enhanced_mode_enabled || _reverse_map == null)
+				return cmd;
+
+			string? mapped = _reverse_map.lookup(cmd);
+			return (mapped != null) ? mapped : cmd;
+		}
+
+		// Florida Enhanced: 生成随机请求ID前缀
+		private static string generate_rpc_request_id_prefix() {
+			init_rpc_enhancement();
+			
+			if (!_enhanced_mode_enabled)
+				return "";
+
+			string[] prefixes = {"req", "id", "op", "cmd", "task"};
+			var random_index = Random.int_range(0, prefixes.length);
+			return prefixes[random_index] + "_";
+		}
 
 		public RpcClient (RpcPeer peer) {
 			Object (peer: peer);
@@ -13,13 +92,18 @@ namespace Frida {
 
 		public async Json.Node call (string method, Json.Node[] args, Bytes? data, Cancellable? cancellable) throws Error, IOError {
 			string request_id = Uuid.string_random ();
+			
+			// Florida Enhanced: 添加随机前缀到请求ID
+			string enhanced_request_id = generate_rpc_request_id_prefix() + request_id;
+			string actual_request_id = (_enhanced_mode_enabled && enhanced_request_id != request_id) ? enhanced_request_id : request_id;
 
 			var request = new Json.Builder ();
 			request
 				.begin_array ()
-				.add_string_value ("frida:rpc")
-				.add_string_value (request_id)
-				.add_string_value ("call")
+				// Florida Enhanced: 使用增强的协议标识符
+				.add_string_value (map_rpc_command("frida:rpc"))
+				.add_string_value (actual_request_id)
+				.add_string_value (map_rpc_command("call"))
 				.add_string_value (method)
 				.begin_array ();
 			foreach (var arg in args)
@@ -36,19 +120,19 @@ namespace Frida {
 					call.callback ();
 				return false;
 			});
-			pending_responses[request_id] = pending;
+			pending_responses[actual_request_id] = pending;
 
 			try {
 				yield peer.post_rpc_message (raw_request, data, cancellable);
 			} catch (Error e) {
-				if (pending_responses.unset (request_id))
+				if (pending_responses.unset (actual_request_id))
 					pending.complete_with_error (e);
 			}
 
 			if (!pending.completed) {
 				var cancel_source = new CancellableSource (cancellable);
 				cancel_source.set_callback (() => {
-					if (pending_responses.unset (request_id))
+					if (pending_responses.unset (actual_request_id))
 						pending.complete_with_error (new IOError.CANCELLED ("Operation was cancelled"));
 					return false;
 				});
@@ -70,7 +154,10 @@ namespace Frida {
 		}
 
 		public bool try_handle_message (string json) {
-			if (json.index_of ("\"frida:rpc\"") == -1)
+			// Florida Enhanced: 支持标准和增强协议标识符的检测
+			string standard_marker = "\"frida:rpc\"";
+			string enhanced_marker = "\"" + map_rpc_command("frida:rpc") + "\"";
+			if (json.index_of (standard_marker) == -1 && json.index_of (enhanced_marker) == -1)
 				return false;
 
 			var parser = new Json.Parser ();
@@ -94,12 +181,16 @@ namespace Frida {
 			var payload = message.get_member ("payload");
 			if (payload == null || payload.get_node_type () != Json.NodeType.ARRAY)
 				return false;
+
 			var rpc_message = payload.get_array ();
 			if (rpc_message.get_length () < 4)
 				return false;
 
-			string? type = rpc_message.get_element (0).get_string ();
-			if (type == null || type != "frida:rpc")
+			string? type_raw = rpc_message.get_element (0).get_string ();
+			if (type_raw == null)
+				return false;
+			string type = reverse_map_rpc_command(type_raw);
+			if (type != "frida:rpc")
 				return false;
 
 			var request_id_value = rpc_message.get_element (1);
@@ -111,7 +202,9 @@ namespace Frida {
 			if (!pending_responses.unset (request_id, out response))
 				return false;
 
-			var status = rpc_message.get_string_element (2);
+			var status_raw = rpc_message.get_string_element (2);
+			string status = reverse_map_rpc_command(status_raw);
+
 			if (status == "ok")
 				response.complete_with_result (rpc_message.get_element (3));
 			else
-- 
2.45.1.windows.1

