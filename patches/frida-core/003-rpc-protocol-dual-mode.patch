From 547d7399c4576ea0405874ce0f916b94c19fec9a Mon Sep 17 00:00:00 2001
From: imkenf <imkenf@gmail.com>
Date: Wed, 11 Jun 2025 19:53:12 +0800
Subject: [PATCH 003/004] Florida Enhanced: RPC协议双模式 动态协议混淆与标准兼容性

---
 lib/base/rpc.vala | 49 +++++++++++++++++++++++++++++++++--------------
 1 file changed, 35 insertions(+), 14 deletions(-)

diff --git a/lib/base/rpc.vala b/lib/base/rpc.vala
index c465452..f99dcfd 100644
--- a/lib/base/rpc.vala
+++ b/lib/base/rpc.vala
@@ -7,6 +7,12 @@ namespace Frida {
 
 		private Gee.HashMap<string, PendingResponse> pending_responses = new Gee.HashMap<string, PendingResponse> ();
 
+		// Florida Enhanced: 初始化RPC协议增强器
+		static construct {
+			// 初始化RPC协议增强器 (通过环境变量控制)
+			FloridaEnhanced.RpcProtocolEnhancer.init();
+		}
+
 		public RpcClient (RpcPeer peer) {
 			Object (peer: peer);
 		}
@@ -14,12 +20,18 @@ namespace Frida {
 		public async Json.Node call (string method, Json.Node[] args, Bytes? data, Cancellable? cancellable) throws Error, IOError {
 			string request_id = Uuid.string_random ();
 
+			// Florida Enhanced: 添加随机前缀到请求ID
+			string enhanced_request_id = FloridaEnhanced.RpcProtocolEnhancer.generate_request_id_prefix() + request_id;
+			// 实际发送的ID就是enhanced_request_id，用它作为pending_responses的键
+			string actual_request_id = FloridaEnhanced.RpcProtocolEnhancer.is_enhanced_mode_enabled() ? enhanced_request_id : request_id;
+
 			var request = new Json.Builder ();
 			request
 				.begin_array ()
-				.add_string_value ("frida:rpc")
-				.add_string_value (request_id)
-				.add_string_value ("call")
+				// Florida Enhanced: 使用增强的协议标识符
+				.add_string_value (FloridaEnhanced.RpcProtocolEnhancer.map_command("frida:rpc"))
+				.add_string_value (actual_request_id)
+				.add_string_value (FloridaEnhanced.RpcProtocolEnhancer.map_command("call"))
 				.add_string_value (method)
 				.begin_array ();
 			foreach (var arg in args)
@@ -27,28 +39,28 @@ namespace Frida {
 			request
 				.end_array ()
 				.end_array ();
+
 			string raw_request = Json.to_string (request.get_root (), false);
 
 			bool waiting = false;
-
 			var pending = new PendingResponse (() => {
 				if (waiting)
 					call.callback ();
 				return false;
 			});
-			pending_responses[request_id] = pending;
+			pending_responses[actual_request_id] = pending;
 
 			try {
 				yield peer.post_rpc_message (raw_request, data, cancellable);
 			} catch (Error e) {
-				if (pending_responses.unset (request_id))
+				if (pending_responses.unset (actual_request_id))
 					pending.complete_with_error (e);
 			}
 
 			if (!pending.completed) {
 				var cancel_source = new CancellableSource (cancellable);
 				cancel_source.set_callback (() => {
-					if (pending_responses.unset (request_id))
+					if (pending_responses.unset (actual_request_id))
 						pending.complete_with_error (new IOError.CANCELLED ("Operation was cancelled"));
 					return false;
 				});
@@ -70,7 +82,10 @@ namespace Frida {
 		}
 
 		public bool try_handle_message (string json) {
-			if (json.index_of ("\"frida:rpc\"") == -1)
+			// Florida Enhanced: 支持标准和增强协议标识符的检测
+			string standard_marker = "\"frida:rpc\"";
+			string enhanced_marker = "\"" + FloridaEnhanced.RpcProtocolEnhancer.map_command("frida:rpc") + "\"";
+			if (json.index_of (standard_marker) == -1 && json.index_of (enhanced_marker) == -1)
 				return false;
 
 			var parser = new Json.Parser ();
@@ -82,9 +97,8 @@ namespace Frida {
 			var message = parser.get_root ().get_object ();
 
 			bool handled = false;
-
-			var type = message.get_string_member ("type");
-			if (type == "send")
+			var msg_type = message.get_string_member ("type");
+			if (msg_type == "send")
 				handled = try_handle_rpc_message (message);
 
 			return handled;
@@ -94,12 +108,17 @@ namespace Frida {
 			var payload = message.get_member ("payload");
 			if (payload == null || payload.get_node_type () != Json.NodeType.ARRAY)
 				return false;
+
 			var rpc_message = payload.get_array ();
+
 			if (rpc_message.get_length () < 4)
 				return false;
 
-			string? type = rpc_message.get_element (0).get_string ();
-			if (type == null || type != "frida:rpc")
+			string? type_raw = rpc_message.get_element (0).get_string ();
+			if (type_raw == null)
+				return false;
+			string type = FloridaEnhanced.RpcProtocolEnhancer.reverse_map_command(type_raw);
+			if (type != "frida:rpc")
 				return false;
 
 			var request_id_value = rpc_message.get_element (1);
@@ -111,7 +130,9 @@ namespace Frida {
 			if (!pending_responses.unset (request_id, out response))
 				return false;
 
-			var status = rpc_message.get_string_element (2);
+			var status_raw = rpc_message.get_string_element (2);
+			string status = FloridaEnhanced.RpcProtocolEnhancer.reverse_map_command(status_raw);
+
 			if (status == "ok")
 				response.complete_with_result (rpc_message.get_element (3));
 			else
-- 
2.45.1.windows.1

