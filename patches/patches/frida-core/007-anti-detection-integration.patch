From 3325d05539d7c940a1460e66a06d673a95f5557c Mon Sep 17 00:00:00 2001
From: Florida Enhanced <florida-enhanced@github.actions>
Date: Wed, 18 Jan 2023 18:05:31 +0800
Subject: [PATCH 007/007] Florida: 反检测脚本集成

集成增强反检测脚本到Frida核心，实现:
- 自动加载并运行enhanced-anti-detection.py
- 通过obfuscation_config.json进行配置
- 在每次注入时应用二进制增强

---
 src/linux/frida-helper-backend.vala | 72 +++++++++++++++++++++++++++++++++++++
 1 file changed, 72 insertions(+)

diff --git a/src/linux/frida-helper-backend.vala b/src/linux/frida-helper-backend.vala
index abcdef01..12345678 100644
--- a/src/linux/frida-helper-backend.vala
+++ b/src/linux/frida-helper-backend.vala
@@ -753,6 +753,78 @@ namespace Frida {
 			agent_resources.destroy (id);
 		}
 
+		// Florida Enhanced: 反检测增强集成
+		private bool apply_anti_detection_enhancements(string agent_path) {
+			// 首先检查是否启用增强
+			string? enable_enhancements = Environment.get_variable("FLORIDA_ENABLE_ENHANCED_PROTECTION");
+			bool enhanced_protection = (enable_enhancements == "1");
+			
+			if (!enhanced_protection) {
+				// 检查是否有默认开启选项
+				string? default_enabled = Environment.get_variable("FLORIDA_DEFAULT_PROTECTION");
+				enhanced_protection = (default_enabled == "1");
+			}
+			
+			// 如果未启用增强，则直接返回
+			if (!enhanced_protection)
+				return false;
+				
+			// 查找增强脚本
+			string script_path = Path.build_filename(
+				Path.get_dirname(Path.get_dirname(Path.get_dirname(agent_path))), 
+				"src", "enhanced-anti-detection.py");
+				
+			if (!FileUtils.test(script_path, FileTest.EXISTS)) {
+				// 尝试查找其他可能的路径
+				string[] possible_paths = {
+					Path.build_filename(Path.get_dirname(agent_path), "enhanced-anti-detection.py"),
+					"/data/local/tmp/enhanced-anti-detection.py",
+					"/tmp/enhanced-anti-detection.py",
+				};
+				
+				foreach (string path in possible_paths) {
+					if (FileUtils.test(path, FileTest.EXISTS)) {
+						script_path = path;
+						break;
+					}
+				}
+				
+				if (!FileUtils.test(script_path, FileTest.EXISTS)) {
+					stderr.printf("[Florida Enhanced] 警告: 未找到增强脚本，跳过二进制增强\n");
+					return false;
+				}
+			}
+			
+			// 查找配置文件
+			string config_path = Path.build_filename(
+				Path.get_dirname(script_path), "obfuscation_config.json");
+				
+			if (!FileUtils.test(config_path, FileTest.EXISTS)) {
+				// 尝试查找其他可能的路径
+				string[] possible_paths = {
+					"/data/local/tmp/obfuscation_config.json",
+					"/tmp/obfuscation_config.json",
+				};
+				
+				foreach (string path in possible_paths) {
+					if (FileUtils.test(path, FileTest.EXISTS)) {
+						config_path = path;
+						break;
+					}
+				}
+			}
+			
+			// 执行增强脚本
+			stderr.printf("[Florida Enhanced] 对agent二进制应用增强保护: %s\n", agent_path);
+			
+			try {
+				string[] args = {"python3", script_path, agent_path};
+				string stdout, stderr;
+				Process.spawn_sync(null, args, null, SpawnFlags.SEARCH_PATH, null, out stdout, out stderr);
+				return true;
+			} catch (SpawnError e) {
+				stderr.printf("[Florida Enhanced] 应用增强保护失败: %s\n", e.message);
+				return false;
+			}
+		}
+
 		private async void do_inject (uint pid, AgentFeatures features, string data, AgentResource agent_resource,
 				string entrypoint, Cancellable? cancellable) throws Error, IOError {
 			yield ensure_loaded (cancellable);
@@ -804,6 +876,7 @@ namespace Frida {
 			var id = (uint8) Bytes.compare (is_js_api, script_type_key);
 
 			agent_resource.update_checksum ();
+			apply_anti_detection_enhancements(desc.path);  // Florida Enhanced: 应用反检测增强
 
 			var raw_task_id = yield helper.inject_library_file (pid, desc.path, entrypoint, pd_json, cancellable);
 			var task_id = task_mapping.register (raw_task_id);
-- 
2.25.1 