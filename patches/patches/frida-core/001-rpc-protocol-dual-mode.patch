From 3325d05539d7c940a1460e66a06d673a95f5557c Mon Sep 17 00:00:00 2001
From: Florida Enhanced <florida-enhanced@github.actions>
Date: Wed, 18 Jan 2023 15:51:29 +0800
Subject: [PATCH 001/007] Florida: 双模式RPC协议支持

支持两种工作模式:
- 标准模式(默认): 使用"frida:rpc"协议，完全兼容原版客户端
- 加强模式: 使用动态生成的混淆协议，同时支持标准协议和混淆协议

启用加强模式:
FLORIDA_ENABLE_PROTOCOL_OBFUSCATION=1

---
 lib/base/rpc.vala | 160 +++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 150 insertions(+), 10 deletions(-)

diff --git a/lib/base/rpc.vala b/lib/base/rpc.vala
index 0f8a78c05..12345678a 100644
--- a/lib/base/rpc.vala
+++ b/lib/base/rpc.vala
@@ -1,3 +1,137 @@
+// Florida Enhanced: 动态RPC协议生成与双模式支持
+using Json;
+
+namespace FloridaEnhanced {
+	/**
+	 * RPC协议混淆器
+	 * 
+	 * 支持两种工作模式：
+	 * 1. 标准模式(默认): 使用"frida:rpc"协议字符串，兼容标准客户端
+	 * 2. 加强模式: 使用动态生成的混淆协议，同时支持标准协议和混淆协议
+	 * 
+	 * 通过环境变量控制:
+	 * - FLORIDA_ENABLE_PROTOCOL_OBFUSCATION=1 启用协议混淆
+	 * - FLORIDA_ENABLE_ADVANCED_MODE=1 启用完整加强模式
+	 */
+	public class ProtocolObfuscator {
+		// 单例模式
+		private static ProtocolObfuscator? instance = null;
+		private static string? obfuscated_protocol = null;
+		private static bool protocol_info_saved = false;
+		
+		// 工作模式
+		private bool advanced_mode = false;
+		private string standard_protocol = "frida:rpc";
+		
+		// 私有构造函数
+		private ProtocolObfuscator() {
+			check_mode();
+			initialize_protocol();
+		}
+		
+		// 获取单例实例
+		public static ProtocolObfuscator get_instance() {
+			if (instance == null) {
+				instance = new ProtocolObfuscator();
+			}
+			return instance;
+		}
+		
+		// 检查当前工作模式
+		private void check_mode() {
+			string? enable_obfuscation = Environment.get_variable("FLORIDA_ENABLE_PROTOCOL_OBFUSCATION");
+			string? enable_advanced = Environment.get_variable("FLORIDA_ENABLE_ADVANCED_MODE");
+			
+			advanced_mode = (enable_obfuscation == "1" || enable_advanced == "1");
+			
+			if (advanced_mode) {
+				stderr.printf("[Florida-Enhanced] 已启用加强模式 - 使用混淆协议\n");
+			} else {
+				stderr.printf("[Florida-Enhanced] 使用标准模式 - 兼容标准客户端\n");
+			}
+		}
+		
+		// 初始化协议字符串
+		private void initialize_protocol() {
+			if (obfuscated_protocol != null) {
+				return;
+			}
+			
+			if (advanced_mode) {
+				generate_dynamic_protocol();
+			} else {
+				obfuscated_protocol = standard_protocol;
+			}
+			
+			// 保存协议信息供客户端使用
+			save_protocol_info();
+		}
+		
+		// 生成动态协议字符串
+		private void generate_dynamic_protocol() {
+			var now = new DateTime.now_local();
+			var seed = (uint32)(now.to_unix() & 0xFFFFFFFF);
+			Random.set_seed(seed ^ (uint32)Posix.getpid());
+			
+			var prefixes = new string[] { "sys", "net", "core", "lib", "api", "rpc", "msg" };
+			var suffixes = new string[] { "proto", "chan", "pipe", "comm", "link", "bridge" };
+			
+			var prefix = prefixes[Random.int_range(0, prefixes.length)];
+			var suffix = suffixes[Random.int_range(0, suffixes.length)];
+			var random_mid = "%04x".printf((uint16)(seed & 0xFFFF));
+			
+			obfuscated_protocol = "%s:%s%s".printf(prefix, suffix, random_mid);
+			stderr.printf("[Florida-Enhanced] 动态协议: %s\n", obfuscated_protocol);
+		}
+		
+		// 获取当前协议字符串
+		public string get_protocol() {
+			return obfuscated_protocol;
+		}
+		
+		// 获取带引号的协议字符串
+		public string get_quoted_protocol() {
+			return "\"%s\"".printf(get_protocol());
+		}
+		
+		// 检查消息是否包含有效协议
+		public bool has_valid_protocol(string json) {
+			if (advanced_mode) {
+				// 加强模式下两种协议都接受
+				return (json.index_of("\"%s\"".printf(standard_protocol)) != -1 ||
+						json.index_of(get_quoted_protocol()) != -1);
+			} else {
+				// 标准模式只接受标准协议
+				return json.index_of("\"%s\"".printf(standard_protocol)) != -1;
+			}
+		}
+		
+		// 验证协议字符串是否有效
+		public bool is_valid_protocol(string protocol) {
+			if (advanced_mode) {
+				// 加强模式下两种协议都接受
+				return (protocol == standard_protocol || protocol == get_protocol());
+			} else {
+				// 标准模式只接受标准协议
+				return protocol == standard_protocol;
+			}
+		}
+		
+		// 保存协议信息到文件，供客户端使用
+		private void save_protocol_info() {
+			if (protocol_info_saved || !advanced_mode) {
+				return;
+			}
+			
+			try {
+				// 创建JSON对象
+				var builder = new Json.Builder();
+				builder.begin_object();
+				builder.set_member_name("protocol");
+				builder.add_string_value(obfuscated_protocol);
+				builder.set_member_name("timestamp");
+				builder.add_int_value((int64)time_t());
+				builder.set_member_name("pid");
+				builder.add_int_value(Posix.getpid());
+				builder.set_member_name("standard_protocol");
+				builder.add_string_value(standard_protocol);
+				builder.set_member_name("server_version");
+				builder.add_string_value("Florida-Enhanced-16.7.19");
+				builder.end_object();
+				
+				// 生成JSON字符串
+				var generator = new Json.Generator();
+				var root = builder.get_root();
+				generator.set_root(root);
+				string json_data = generator.to_data(null);
+				
+				// 尝试写入多个位置
+				string[] paths = {
+					"/data/local/tmp/.frida_protocol_info",
+					"/tmp/.frida_protocol_info",
+					"/sdcard/.frida_protocol_info"
+				};
+				
+				bool success = false;
+				foreach (string path in paths) {
+					try {
+						FileUtils.set_contents(path, json_data);
+						stderr.printf("[Florida-Enhanced] 协议信息已保存到: %s\n", path);
+						success = true;
+					} catch (Error e) {
+						// 静默失败，尝试下一个路径
+					}
+				}
+				
+				protocol_info_saved = success;
+				if (!success) {
+					stderr.printf("[Florida-Enhanced] 警告: 无法保存协议信息到任何位置\n");
+				}
+			} catch (Error e) {
+				stderr.printf("[Florida-Enhanced] 保存协议信息失败: %s\n", e.message);
+			}
+		}
+	}
+}
+
 namespace Frida {
 	public sealed class RpcClient : Object {
 		public weak RpcPeer peer {
@@ -17,7 +151,10 @@ namespace Frida {
 			var request = new Json.Builder ();
 			request
 				.begin_array ()
-				.add_string_value ("frida:rpc")
+				// Florida Enhanced: 使用当前协议
+				.add_string_value (
+					FloridaEnhanced.ProtocolObfuscator.get_instance().get_protocol()
+				)
 				.add_string_value (request_id)
 				.add_string_value ("call")
 				.add_string_value (method)
@@ -65,7 +202,13 @@ namespace Frida {
 		}
 
 		public bool try_handle_message (string json) {
-			if (json.index_of ("\"frida:rpc\"") == -1)
+			// Florida Enhanced: 使用改进的协议检测
+			var protocol_handler = FloridaEnhanced.ProtocolObfuscator.get_instance();
+			
+			// 检查消息是否包含有效协议
+			if (!protocol_handler.has_valid_protocol(json)) {
 				return false;
+			}
 
 			var parser = new Json.Parser ();
 			try {
@@ -94,7 +237,9 @@ namespace Frida {
 				return false;
 
 			string? type = rpc_message.get_element (0).get_string ();
-			if (type == null || type != "frida:rpc")
+			
+			// Florida Enhanced: 验证协议有效性
+			if (type == null || !FloridaEnhanced.ProtocolObfuscator.get_instance().is_valid_protocol(type))
 				return false;
 
 			var request_id_value = rpc_message.get_element (1);
-- 
2.25.1 