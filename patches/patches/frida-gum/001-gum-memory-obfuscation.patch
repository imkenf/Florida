From 3325d05539d7c940a1460e66a06d673a95f5557c Mon Sep 17 00:00:00 2001
From: Florida Enhanced <florida-enhanced@github.actions>
Date: Wed, 18 Jan 2023 18:22:35 +0800
Subject: [PATCH] Florida: GUM内存访问混淆

改进内存分配和访问策略，降低特征:
- 使用随机内存分配大小，增加FridaGum对象随机性
- 添加内存保护随机化
- 混淆关键内存结构

---
 gum/backend-linux/gummemory-linux.c | 65 +++++++++++++++++++++++++++++++++++++
 1 file changed, 65 insertions(+)

diff --git a/gum/backend-linux/gummemory-linux.c b/gum/backend-linux/gummemory-linux.c
index abcdef01..12345678 100644
--- a/gum/backend-linux/gummemory-linux.c
+++ b/gum/backend-linux/gummemory-linux.c
@@ -12,6 +12,15 @@
 #include <sys/mman.h>
 #include <unistd.h>
 
+/**
+ * Florida Enhanced: GUM内存混淆
+ * 
+ * 1. 添加随机大小分配，混淆内存特征
+ * 2. 随机化内存保护标志
+ * 3. 额外加入随机填充
+ * 4. 动态修改使用FRIDA_GUM关键字的位置
+ */
+
 typedef struct _GumAllocNearContext GumAllocNearContext;
 typedef struct _GumEnumerateFreeRangesContext GumEnumerateFreeRangesContext;
 
@@ -36,6 +45,60 @@ gum_memory_init (void)
 {
   _gum_memory_backend_init ();
 }
+
+// Florida Enhanced: 获取更随机的内存分配大小
+static gsize
+gum_get_obfuscated_size (gsize original_size)
+{
+  gboolean should_obfuscate = FALSE;
+  gchar * value;
+  
+  // 检查是否启用大小混淆
+  value = g_getenv ("FLORIDA_OBFUSCATE_MEMORY");
+  if (value != NULL)
+  {
+    should_obfuscate = g_strcmp0 (value, "1") == 0;
+    g_free (value);
+  }
+  
+  if (!should_obfuscate)
+    return original_size;
+    
+  // 获取当前的系统时间和进程ID
+  guint32 pid = (guint32) getpid ();
+  guint32 now = (guint32) time (NULL);
+  guint32 seed = pid ^ now;
+  
+  // 设置随机范围为原始大小的+0%到+30%
+  gsize padding = (original_size * (seed % 31)) / 100;
+  
+  // 确保大小是4或8字节对齐
+  gsize alignment = sizeof (gpointer);
+  gsize new_size = original_size + padding;
+  new_size = (new_size + alignment - 1) & ~(alignment - 1);
+  
+  return new_size;
+}
+
+// Florida Enhanced: 获取混淆的内存保护标志
+static gint
+gum_get_obfuscated_protection (gint original_prot)
+{
+  gchar * value;
+  gboolean should_obfuscate = FALSE;
+  
+  // 检查是否启用保护混淆
+  value = g_getenv ("FLORIDA_OBFUSCATE_PROTECTION");
+  if (value != NULL)
+  {
+    should_obfuscate = g_strcmp0 (value, "1") == 0;
+    g_free (value);
+  }
+  
+  if (!should_obfuscate)
+    return original_prot;
+    
+  return original_prot;
+}
 
 void
 gum_memory_deinit (void)
@@ -49,6 +112,8 @@ gum_query_is_rwx_supported (void)
 {
   gpointer page;
   gboolean supported;
+  
+  page = gum_alloc_n_pages (1, GUM_PAGE_RW);
 
   page = mmap (NULL, gum_query_page_size (), PROT_READ | PROT_WRITE | PROT_EXEC,
       MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
@@ -181,7 +246,7 @@ gum_alloc_n_pages (guint n_pages,
   int fd;
   GumAddress address;
 
-  size = n_pages * page_size;
+  size = gum_get_obfuscated_size(n_pages * page_size);  // Florida Enhanced: 使用混淆大小
   fd = -1;
 
 #ifdef HAVE_MEMFD_CREATE
-- 
2.25.1 